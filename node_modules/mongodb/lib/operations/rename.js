<<<<<<< HEAD
'use strict';

const OperationBase = require('./operation').OperationBase;
const applyWriteConcern = require('../utils').applyWriteConcern;
const checkCollectionName = require('../utils').checkCollectionName;
const executeDbAdminCommand = require('./db_ops').executeDbAdminCommand;
const handleCallback = require('../utils').handleCallback;
const loadCollection = require('../dynamic_loaders').loadCollection;
const toError = require('../utils').toError;

class RenameOperation extends OperationBase {
  constructor(collection, newName, options) {
    super(options);

    this.collection = collection;
    this.newName = newName;
  }

  execute(callback) {
    const coll = this.collection;
    const newName = this.newName;
    const options = this.options;

    let Collection = loadCollection();
    // Check the collection name
    checkCollectionName(newName);
    // Build the command
    const renameCollection = coll.namespace;
    const toCollection = coll.s.namespace.withCollection(newName).toString();
    const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;
    const cmd = { renameCollection: renameCollection, to: toCollection, dropTarget: dropTarget };

    // Decorate command with writeConcern if supported
    applyWriteConcern(cmd, { db: coll.s.db, collection: coll }, options);

    // Execute against admin
    executeDbAdminCommand(coll.s.db.admin().s.db, cmd, options, (err, doc) => {
      if (err) return handleCallback(callback, err, null);
      // We have an error
      if (doc.errmsg) return handleCallback(callback, toError(doc), null);
      try {
        return handleCallback(
          callback,
          null,
          new Collection(
            coll.s.db,
            coll.s.topology,
            coll.s.namespace.db,
            newName,
            coll.s.pkFactory,
            coll.s.options
          )
        );
      } catch (err) {
        return handleCallback(callback, toError(err), null);
      }
    });
  }
}

module.exports = RenameOperation;
=======
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenameOperation = void 0;
const responses_1 = require("../cmap/wire_protocol/responses");
const collection_1 = require("../collection");
const utils_1 = require("../utils");
const command_1 = require("./command");
const operation_1 = require("./operation");
/** @internal */
class RenameOperation extends command_1.CommandOperation {
    constructor(collection, newName, options) {
        super(collection, options);
        this.SERVER_COMMAND_RESPONSE_TYPE = responses_1.MongoDBResponse;
        this.collection = collection;
        this.newName = newName;
        this.options = options;
        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');
    }
    get commandName() {
        return 'renameCollection';
    }
    buildCommandDocument(_connection, _session) {
        const renameCollection = this.collection.namespace;
        const to = this.collection.s.namespace.withCollection(this.newName).toString();
        const dropTarget = typeof this.options.dropTarget === 'boolean' ? this.options.dropTarget : false;
        return {
            renameCollection,
            to,
            dropTarget
        };
    }
    handleOk(_response) {
        return new collection_1.Collection(this.collection.db, this.newName, this.collection.s.options);
    }
}
exports.RenameOperation = RenameOperation;
(0, operation_1.defineAspects)(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);
//# sourceMappingURL=rename.js.map
>>>>>>> test
